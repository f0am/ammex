type User {
  id: ID!
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  role: Role!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum Role {
  Employee
  Manager
  Admin
}

type Client {
  id: ID!
  name: String!
  contact: String!
  phone: String!
  address: String!
  email: String!
  jobs(filter: ModelJobFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelJobConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum JobType {
  Bookkeeping
  Taxes
  Payroll
}

type Job {
  id: ID!
  clientID: ID!
  client: Client
  type: JobType!
  dueDate: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelRoleInput {
  eq: Role
  ne: Role
}

input ModelUserFilterInput {
  id: ModelIDInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  phone: ModelStringInput
  email: ModelStringInput
  role: ModelRoleInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getClient(id: ID!): Client
  listClients(filter: ModelClientFilterInput, limit: Int, nextToken: String): ModelClientConnection
  getJob(id: ID!): Job
  listJobs(filter: ModelJobFilterInput, limit: Int, nextToken: String): ModelJobConnection
}

input CreateUserInput {
  id: ID
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  role: Role!
}

input UpdateUserInput {
  id: ID!
  firstName: String
  lastName: String
  phone: String
  email: String
  role: Role
}

input DeleteUserInput {
  id: ID
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createClient(input: CreateClientInput!, condition: ModelClientConditionInput): Client
  updateClient(input: UpdateClientInput!, condition: ModelClientConditionInput): Client
  deleteClient(input: DeleteClientInput!, condition: ModelClientConditionInput): Client
  createJob(input: CreateJobInput!, condition: ModelJobConditionInput): Job
  updateJob(input: UpdateJobInput!, condition: ModelJobConditionInput): Job
  deleteJob(input: DeleteJobInput!, condition: ModelJobConditionInput): Job
}

input ModelUserConditionInput {
  firstName: ModelStringInput
  lastName: ModelStringInput
  phone: ModelStringInput
  email: ModelStringInput
  role: ModelRoleInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateClient: Client @aws_subscribe(mutations: ["createClient"])
  onUpdateClient: Client @aws_subscribe(mutations: ["updateClient"])
  onDeleteClient: Client @aws_subscribe(mutations: ["deleteClient"])
  onCreateJob: Job @aws_subscribe(mutations: ["createJob"])
  onUpdateJob: Job @aws_subscribe(mutations: ["updateJob"])
  onDeleteJob: Job @aws_subscribe(mutations: ["deleteJob"])
}

type ModelClientConnection {
  items: [Client]
  nextToken: String
}

input ModelClientFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  contact: ModelStringInput
  phone: ModelStringInput
  address: ModelStringInput
  email: ModelStringInput
  and: [ModelClientFilterInput]
  or: [ModelClientFilterInput]
  not: ModelClientFilterInput
}

input CreateClientInput {
  id: ID
  name: String!
  contact: String!
  phone: String!
  address: String!
  email: String!
}

input UpdateClientInput {
  id: ID!
  name: String
  contact: String
  phone: String
  address: String
  email: String
}

input DeleteClientInput {
  id: ID
}

input ModelClientConditionInput {
  name: ModelStringInput
  contact: ModelStringInput
  phone: ModelStringInput
  address: ModelStringInput
  email: ModelStringInput
  and: [ModelClientConditionInput]
  or: [ModelClientConditionInput]
  not: ModelClientConditionInput
}

type ModelJobConnection {
  items: [Job]
  nextToken: String
}

input ModelJobTypeInput {
  eq: JobType
  ne: JobType
}

input ModelJobFilterInput {
  id: ModelIDInput
  clientID: ModelIDInput
  type: ModelJobTypeInput
  dueDate: ModelStringInput
  and: [ModelJobFilterInput]
  or: [ModelJobFilterInput]
  not: ModelJobFilterInput
}

input CreateJobInput {
  id: ID
  clientID: ID!
  type: JobType!
  dueDate: String!
}

input UpdateJobInput {
  id: ID!
  clientID: ID
  type: JobType
  dueDate: String
}

input DeleteJobInput {
  id: ID
}

input ModelJobConditionInput {
  clientID: ModelIDInput
  type: ModelJobTypeInput
  dueDate: ModelStringInput
  and: [ModelJobConditionInput]
  or: [ModelJobConditionInput]
  not: ModelJobConditionInput
}
