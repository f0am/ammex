type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  phone: String!
  role: UserRole!
  status: String
  jobs(filter: ModelJobFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelJobConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  version: Int!
}

enum UserRole {
  EMPLOYEE
  MANAGER
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  DISABLED
}

type Client {
  id: ID!
  clientNumber: String!
  name: String!
  contact: String!
  phone: String!
  address: String!
  province: String
  city: String!
  postalCode: String!
  email: String!
  owners: [String]
  status: String
  contracts(type: ModelStringKeyConditionInput, filter: ModelContractFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelContractConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  version: Int!
}

type Contract {
  clientID: ID!
  client: Client
  type: String!
  startDate: AWSDateTime
  endDate: AWSDateTime
  gst: String
  qst: String
  period: String
  corporation: Boolean
  corporationYearEndDate: String
  payrollNumber: String
  payrollFrequency: String
  remittancePeriod: String
  remittancePeriodQc: String
  cheques: Int
  wsib: String
  wsibRemittance: String
  wsibRate: String
  wsibCode: String
  csst: String
  csstRemittance: String
  csstRate: String
  csstCode: String
  t4Deadline: String
  jobs(filter: ModelJobFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelJobConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  version: Int!
}

type Job {
  id: ID!
  clientID: ID!
  client: Client
  type: String!
  name: String
  description: String
  contract: Contract
  deadline: String!
  assigneeID: ID
  status: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  version: Int!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserRoleInput {
  eq: UserRole
  ne: UserRole
}

input ModelUserFilterInput {
  id: ModelIDInput
  email: ModelStringInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  phone: ModelStringInput
  role: ModelUserRoleInput
  status: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getClient(id: ID!): Client
  listClients(filter: ModelClientFilterInput, limit: Int, nextToken: String): ModelClientConnection
  getContract(clientID: ID!, type: String!): Contract
  listContracts(clientID: ID, type: ModelStringKeyConditionInput, filter: ModelContractFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelContractConnection
  getJob(id: ID!): Job
  listJobs(filter: ModelJobFilterInput, limit: Int, nextToken: String): ModelJobConnection
}

input CreateUserInput {
  id: ID
  email: String!
  firstName: String!
  lastName: String!
  phone: String!
  role: UserRole!
  status: String
}

input UpdateUserInput {
  id: ID!
  email: String
  firstName: String
  lastName: String
  phone: String
  role: UserRole
  status: String
  expectedVersion: Int!
}

input DeleteUserInput {
  id: ID
  expectedVersion: Int!
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createClient(input: CreateClientInput!, condition: ModelClientConditionInput): Client
  updateClient(input: UpdateClientInput!, condition: ModelClientConditionInput): Client
  deleteClient(input: DeleteClientInput!, condition: ModelClientConditionInput): Client
  createContract(input: CreateContractInput!, condition: ModelContractConditionInput): Contract
  updateContract(input: UpdateContractInput!, condition: ModelContractConditionInput): Contract
  deleteContract(input: DeleteContractInput!, condition: ModelContractConditionInput): Contract
  createJob(input: CreateJobInput!, condition: ModelJobConditionInput): Job
  updateJob(input: UpdateJobInput!, condition: ModelJobConditionInput): Job
  deleteJob(input: DeleteJobInput!, condition: ModelJobConditionInput): Job
}

input ModelUserConditionInput {
  email: ModelStringInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  phone: ModelStringInput
  role: ModelUserRoleInput
  status: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateClient: Client @aws_subscribe(mutations: ["createClient"])
  onUpdateClient: Client @aws_subscribe(mutations: ["updateClient"])
  onDeleteClient: Client @aws_subscribe(mutations: ["deleteClient"])
  onCreateContract: Contract @aws_subscribe(mutations: ["createContract"])
  onUpdateContract: Contract @aws_subscribe(mutations: ["updateContract"])
  onDeleteContract: Contract @aws_subscribe(mutations: ["deleteContract"])
  onCreateJob: Job @aws_subscribe(mutations: ["createJob"])
  onUpdateJob: Job @aws_subscribe(mutations: ["updateJob"])
  onDeleteJob: Job @aws_subscribe(mutations: ["deleteJob"])
}

type ModelClientConnection {
  items: [Client]
  nextToken: String
}

input ModelClientFilterInput {
  id: ModelIDInput
  clientNumber: ModelStringInput
  name: ModelStringInput
  contact: ModelStringInput
  phone: ModelStringInput
  address: ModelStringInput
  province: ModelStringInput
  city: ModelStringInput
  postalCode: ModelStringInput
  email: ModelStringInput
  owners: ModelStringInput
  status: ModelStringInput
  and: [ModelClientFilterInput]
  or: [ModelClientFilterInput]
  not: ModelClientFilterInput
}

input CreateClientInput {
  id: ID
  clientNumber: String!
  name: String!
  contact: String!
  phone: String!
  address: String!
  province: String
  city: String!
  postalCode: String!
  email: String!
  owners: [String]
  status: String
}

input UpdateClientInput {
  id: ID!
  clientNumber: String
  name: String
  contact: String
  phone: String
  address: String
  province: String
  city: String
  postalCode: String
  email: String
  owners: [String]
  status: String
  expectedVersion: Int!
}

input DeleteClientInput {
  id: ID
  expectedVersion: Int!
}

input ModelClientConditionInput {
  clientNumber: ModelStringInput
  name: ModelStringInput
  contact: ModelStringInput
  phone: ModelStringInput
  address: ModelStringInput
  province: ModelStringInput
  city: ModelStringInput
  postalCode: ModelStringInput
  email: ModelStringInput
  owners: ModelStringInput
  status: ModelStringInput
  and: [ModelClientConditionInput]
  or: [ModelClientConditionInput]
  not: ModelClientConditionInput
}

type ModelContractConnection {
  items: [Contract]
  nextToken: String
}

input ModelContractFilterInput {
  clientID: ModelIDInput
  type: ModelStringInput
  startDate: ModelStringInput
  endDate: ModelStringInput
  gst: ModelStringInput
  qst: ModelStringInput
  period: ModelStringInput
  corporation: ModelBooleanInput
  corporationYearEndDate: ModelStringInput
  payrollNumber: ModelStringInput
  payrollFrequency: ModelStringInput
  remittancePeriod: ModelStringInput
  remittancePeriodQc: ModelStringInput
  cheques: ModelIntInput
  wsib: ModelStringInput
  wsibRemittance: ModelStringInput
  wsibRate: ModelStringInput
  wsibCode: ModelStringInput
  csst: ModelStringInput
  csstRemittance: ModelStringInput
  csstRate: ModelStringInput
  csstCode: ModelStringInput
  t4Deadline: ModelStringInput
  and: [ModelContractFilterInput]
  or: [ModelContractFilterInput]
  not: ModelContractFilterInput
}

input CreateContractInput {
  clientID: ID!
  type: String!
  startDate: AWSDateTime
  endDate: AWSDateTime
  gst: String
  qst: String
  period: String
  corporation: Boolean
  corporationYearEndDate: String
  payrollNumber: String
  payrollFrequency: String
  remittancePeriod: String
  remittancePeriodQc: String
  cheques: Int
  wsib: String
  wsibRemittance: String
  wsibRate: String
  wsibCode: String
  csst: String
  csstRemittance: String
  csstRate: String
  csstCode: String
  t4Deadline: String
}

input UpdateContractInput {
  clientID: ID!
  type: String!
  startDate: AWSDateTime
  endDate: AWSDateTime
  gst: String
  qst: String
  period: String
  corporation: Boolean
  corporationYearEndDate: String
  payrollNumber: String
  payrollFrequency: String
  remittancePeriod: String
  remittancePeriodQc: String
  cheques: Int
  wsib: String
  wsibRemittance: String
  wsibRate: String
  wsibCode: String
  csst: String
  csstRemittance: String
  csstRate: String
  csstCode: String
  t4Deadline: String
  expectedVersion: Int!
}

input DeleteContractInput {
  clientID: ID!
  type: String!
  expectedVersion: Int!
}

input ModelContractConditionInput {
  startDate: ModelStringInput
  endDate: ModelStringInput
  gst: ModelStringInput
  qst: ModelStringInput
  period: ModelStringInput
  corporation: ModelBooleanInput
  corporationYearEndDate: ModelStringInput
  payrollNumber: ModelStringInput
  payrollFrequency: ModelStringInput
  remittancePeriod: ModelStringInput
  remittancePeriodQc: ModelStringInput
  cheques: ModelIntInput
  wsib: ModelStringInput
  wsibRemittance: ModelStringInput
  wsibRate: ModelStringInput
  wsibCode: ModelStringInput
  csst: ModelStringInput
  csstRemittance: ModelStringInput
  csstRate: ModelStringInput
  csstCode: ModelStringInput
  t4Deadline: ModelStringInput
  and: [ModelContractConditionInput]
  or: [ModelContractConditionInput]
  not: ModelContractConditionInput
}

type ModelJobConnection {
  items: [Job]
  nextToken: String
}

input ModelJobFilterInput {
  id: ModelIDInput
  clientID: ModelIDInput
  type: ModelStringInput
  name: ModelStringInput
  description: ModelStringInput
  deadline: ModelStringInput
  assigneeID: ModelIDInput
  status: ModelStringInput
  and: [ModelJobFilterInput]
  or: [ModelJobFilterInput]
  not: ModelJobFilterInput
}

input CreateJobInput {
  id: ID
  clientID: ID!
  type: String!
  name: String
  description: String
  deadline: String!
  assigneeID: ID
  status: String
}

input UpdateJobInput {
  id: ID!
  clientID: ID
  type: String
  name: String
  description: String
  deadline: String
  assigneeID: ID
  status: String
  expectedVersion: Int!
}

input DeleteJobInput {
  id: ID
  expectedVersion: Int!
}

input ModelJobConditionInput {
  clientID: ModelIDInput
  type: ModelStringInput
  name: ModelStringInput
  description: ModelStringInput
  deadline: ModelStringInput
  assigneeID: ModelIDInput
  status: ModelStringInput
  and: [ModelJobConditionInput]
  or: [ModelJobConditionInput]
  not: ModelJobConditionInput
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}
